// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mine.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MineClient is the client API for Mine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MineClient interface {
	SendResource(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Empty, error)
	GiveResource(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	NeededResource(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Item, error)
}

type mineClient struct {
	cc grpc.ClientConnInterface
}

func NewMineClient(cc grpc.ClientConnInterface) MineClient {
	return &mineClient{cc}
}

func (c *mineClient) SendResource(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.Mine/sendResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mineClient) GiveResource(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/grpc.Mine/giveResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mineClient) NeededResource(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/grpc.Mine/neededResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MineServer is the server API for Mine service.
// All implementations must embed UnimplementedMineServer
// for forward compatibility
type MineServer interface {
	SendResource(context.Context, *Item) (*Empty, error)
	GiveResource(context.Context, *Item) (*Item, error)
	NeededResource(context.Context, *Empty) (*Item, error)
	mustEmbedUnimplementedMineServer()
}

// UnimplementedMineServer must be embedded to have forward compatible implementations.
type UnimplementedMineServer struct {
}

func (UnimplementedMineServer) SendResource(context.Context, *Item) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResource not implemented")
}
func (UnimplementedMineServer) GiveResource(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveResource not implemented")
}
func (UnimplementedMineServer) NeededResource(context.Context, *Empty) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NeededResource not implemented")
}
func (UnimplementedMineServer) mustEmbedUnimplementedMineServer() {}

// UnsafeMineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MineServer will
// result in compilation errors.
type UnsafeMineServer interface {
	mustEmbedUnimplementedMineServer()
}

func RegisterMineServer(s grpc.ServiceRegistrar, srv MineServer) {
	s.RegisterService(&Mine_ServiceDesc, srv)
}

func _Mine_SendResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineServer).SendResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Mine/sendResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineServer).SendResource(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mine_GiveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineServer).GiveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Mine/giveResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineServer).GiveResource(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mine_NeededResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineServer).NeededResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Mine/neededResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineServer).NeededResource(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Mine_ServiceDesc is the grpc.ServiceDesc for Mine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Mine",
	HandlerType: (*MineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendResource",
			Handler:    _Mine_SendResource_Handler,
		},
		{
			MethodName: "giveResource",
			Handler:    _Mine_GiveResource_Handler,
		},
		{
			MethodName: "neededResource",
			Handler:    _Mine_NeededResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mine.proto",
}
